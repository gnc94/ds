#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
struct Node {
    int data;
    struct Node *next;
};

// Function to display the elements of the linked list
void display(struct Node *node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

// Function to search for an element in the linked list
int searchElement(struct Node *head, int item) {
    struct Node *current = head;
    int index = 0;
    
    while (current != NULL) {
        if (current->data == item) {
            return index;
        }
        current = current->next;
        index++;
    }
    return -1; // Item not found
}

int main() {
    int item;

    // Creating and initializing the nodes
    struct Node *head = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node2 = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node3 = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node4 = (struct Node *)malloc(sizeof(struct Node));

    // Setting up the linked list structure
    head->data = 10;
    head->next = node2;

    node2->data = 15;
    node2->next = node3;

    node3->data = 20;
    node3->next = node4;

    node4->data = 25;
    node4->next = NULL;

    // Display the linked list
    printf("Linked List: ");
    display(head);

    // Input the element to search for
    printf("Enter element to search: ");
    scanf("%d", &item);

    // Search the element and display the result
    int index = searchElement(head, item);
    if (index == -1)
        printf("Item not found\n");
    else
        printf("Item found at position: %d\n", index + 1); // 1-based index

    // Free the allocated memory
    free(head);
    free(node2);
    free(node3);
    free(node4);

    return 0;
}
