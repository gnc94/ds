#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* leftChild;
    struct Node* rightChild;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->leftChild = NULL;
    newNode->rightChild = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->leftChild = insert(root->leftChild, data);
    } else {
        root->rightChild = insert(root->rightChild, data);
    }
    return root;
}

void inorderTraversal(struct Node* root) {
    if (root) {
        inorderTraversal(root->leftChild);
        printf(" %d ", root->data);
        inorderTraversal(root->rightChild);
    }
}

int main() {
    struct Node* root = NULL;
    int values[] = {1, 3, 4, 5, 7, 8, 9};
    int n = sizeof(values) / sizeof(values[0]);

    for (int i = 0; i < n; i++) {
        root = insert(root, values[i]);
    }

    printf("In-order traversal of the binary tree: ");
    inorderTraversal(root);

    return 0;
}
